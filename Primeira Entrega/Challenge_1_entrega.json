{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

   "KeyPair" :{
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "KeyPair-SaoPaulo"
   }

  },


  "Resources" : {

    "LoadBalancer" : {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
          "Name": "ApplicationLoadBalancer",
          "Scheme" : "internet-facing",
          "Subnets" : [ {"Ref": "PublicSubnet1"}, {"Ref" : "PublicSubnet2"}],
          "SecurityGroups": [{"Ref": "ALBInstanceSecurityGroup"}]
       }
    },

    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 300,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 60,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 10,
        "Targets": [
          { "Id": {"Ref" : "EC2Instance1"}, "Port": 80 },
          { "Id": {"Ref" : "EC2Instance2"}, "Port": 80 }
        ],
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "TargetGroup" ] ] },
        "Port": 80,
        "Protocol": "HTTP",
        "HealthCheckPath": "/tech-u/index.html",
        "VpcId": { "Ref": "VPC" }
      },
      "DependsOn": [ "LoadBalancer" ]
    },

    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "TargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },


    "EC2Instance1" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "AvailabilityZone" : "us-east-1a",
        "KeyName" : { "Ref" : "KeyPair" },
        "NetworkInterfaces": [ {    
              "AssociatePublicIpAddress" : "True",
              "DeleteOnTermination" : "True",
              "SubnetId" : { "Ref" : "PublicSubnet1" },
              "DeviceIndex" : "0",
              "GroupSet" : [ { "Ref" : "ALBInstanceSecurityGrouptoEC2" } ]
              } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -x\n",
           "yum -y install git\n",
           "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n",
           ". /.nvm/nvm.sh\n",
           "nvm install 4.5.0\n",
           "git clone https://github.com/bemer/tech-u.git\n",
           "cd tech-u\n",
           "npm install\n",
           "npm install --global gulp\n",
           "gulp\n",
           "sudo amazon-linux-extras install -y nginx1.12\n",
           "sudo cp -rf /tech-u /usr/share/nginx/html/\n",
            "sudo nginx\n",
            "sudo chkconfig nginx on\n"
            ] ] } },
        "ImageId" : "ami-04681a1dbd79675a5"
      }
    },

    "EC2Instance2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "AvailabilityZone" : "us-east-1b",
        "KeyName" : { "Ref" : "KeyPair" },
        "NetworkInterfaces": [ {    
              "AssociatePublicIpAddress" : "True",
              "DeleteOnTermination" : "True",
              "SubnetId" : { "Ref" : "PublicSubnet2" },
              "DeviceIndex" : "0",
              "GroupSet" : [ { "Ref" : "ALBInstanceSecurityGrouptoEC2" } ]
              } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -x\n",
              "yum -y install git\n",
              "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n",
              ". /.nvm/nvm.sh\n",
              "nvm install 4.5.0\n",
              "git clone https://github.com/bemer/tech-u.git\n",
              "cd tech-u\n",
              "npm install\n",
              "npm install --global gulp\n",
              "gulp\n",
              "sudo amazon-linux-extras install -y nginx1.12\n",
              "sudo cp -rf /tech-u /usr/share/nginx/html/\n",
              "sudo nginx\n",
              "sudo chkconfig nginx on\n"
            ] ] } },
        "ImageId" : "ami-04681a1dbd79675a5"
      }
    },

    "VPC" : {
         "Type" : "AWS::EC2::VPC",
         "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "EnableDnsSupport" : "true",
            "EnableDnsHostnames" : "true",
            "InstanceTenancy" : "default"
         }
      },

      "PublicSubnet1" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "MapPublicIpOnLaunch": "true",
            "CidrBlock" : "10.0.1.0/24",
            "AvailabilityZone" : "us-east-1a"
         },
        "DependsOn" : "VPC"
      },

      "PublicSubnet2" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "MapPublicIpOnLaunch": "true",
            "CidrBlock" : "10.0.2.0/24",
            "AvailabilityZone" : "us-east-1b"
         },
         "DependsOn" : "VPC"
      },

    "ALBInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "challengeALB",
        "GroupDescription" : "Enable SSH access via port 22",
        "VpcId": {"Ref" : "VPC"},
        "SecurityGroupIngress" : [ {
           "IpProtocol": "tcp",
           "FromPort": "80",
           "ToPort": "80",
           "CidrIp": "0.0.0.0/0"
        } ]
      },
      "DependsOn" : "VPC"
    },

    "ALBInstanceSecurityGrouptoEC2" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "challengeALBtoEC2",
        "GroupDescription" : "Enable ALB access to EC2",
        "VpcId": {"Ref" : "VPC"},
        "SecurityGroupIngress" : [ 
          {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
          },
          {
          "IpProtocol" : "tcp",
          "SourceSecurityGroupId" : { "Ref" : "ALBInstanceSecurityGroup"},
          "FromPort" : "80",
          "ToPort" : "80"
        }
        ]
      },
      "DependsOn" : "VPC"
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },

   "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn" : "VPC",
      "Properties": {
         "InternetGatewayId": {"Ref" : "InternetGateway"},
         "VpcId": {"Ref" : "VPC"}
      }
    },

   "RouteTable" : {
         "Type" : "AWS::EC2::RouteTable",
         "DependsOn" : "VPC",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
         }
    },

    "Route1" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "InternetGateway",
         "Properties" : {
            "RouteTableId" : { "Ref" : "RouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "InternetGateway" }
         }
      },

      "SubnetRouteTableAssociation1" : {
         "Type" : "AWS::EC2::SubnetRouteTableAssociation",
         "DependsOn" : "RouteTable",
         "Properties" : {
            "SubnetId" : { "Ref" : "PublicSubnet1" },
            "RouteTableId" : { "Ref" : "RouteTable" }
         }
      },

      "SubnetRouteTableAssociation2" : {
         "Type" : "AWS::EC2::SubnetRouteTableAssociation",
         "DependsOn" : "RouteTable",
         "Properties" : {
            "SubnetId" : { "Ref" : "PublicSubnet2" },
            "RouteTableId" : { "Ref" : "RouteTable" }
         }
      }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}]]}
    }
  } 
}