{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

   "KeyPair" :{
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "KeyPair-SaoPaulo"
   }

  },


  "Resources" : {

    "LoadBalancer" : {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
          "Name": "ApplicationLoadBalancer",
          "Scheme" : "internet-facing",
          "Subnets" : [ {"Ref": "PrivateSubnet1"}, {"Ref" : "PrivateSubnet2"}],
          "SecurityGroups": [{"Ref": "ALBInstanceSecurityGroup"}]
       }
    },

    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 300,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 60,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 10,
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "TargetGroup" ] ] },
        "Port": 80,
        "Protocol": "HTTP",
        "HealthCheckPath": "/tech-u/index.html",
        "VpcId": { "Ref": "VPC" }
      },
      "DependsOn": [ "LoadBalancer" ]
    },

    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "TargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },

    "VPC" : {
         "Type" : "AWS::EC2::VPC",
         "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "EnableDnsSupport" : "true",
            "EnableDnsHostnames" : "true",
            "InstanceTenancy" : "default"
         }
      },

      "PublicSubnet1" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "MapPublicIpOnLaunch": "true",
            "CidrBlock" : "10.0.1.0/24",
            "AvailabilityZone" : "us-east-1a"
         },
        "DependsOn" : "VPC"
      },

      "PublicSubnet2" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "MapPublicIpOnLaunch": "true",
            "CidrBlock" : "10.0.2.0/24",
            "AvailabilityZone" : "us-east-1b"
         },
         "DependsOn" : "VPC"
      },

      "PrivateSubnet1" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "MapPublicIpOnLaunch": "false",
            "CidrBlock" : "10.0.3.0/24",
            "AvailabilityZone" : "us-east-1a"
         },
        "DependsOn" : "VPC"
      },

      "PrivateSubnet2" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "MapPublicIpOnLaunch": "false",
            "CidrBlock" : "10.0.4.0/24",
            "AvailabilityZone" : "us-east-1b"
         },
         "DependsOn" : "VPC"
      },

    "ALBInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "challengeALB",
        "VpcId": {"Ref" : "VPC"},
        "SecurityGroupIngress" : [ {
           "IpProtocol": "tcp",
           "FromPort": "80",
           "ToPort": "80",
           "CidrIp": "0.0.0.0/0"
        } ]
      },
      "DependsOn" : "VPC"
    },

    "ALBInstanceSecurityGrouptoEC2" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "challengeALBtoEC2",
        "GroupDescription" : "Enable ALB access to EC2",
        "VpcId": {"Ref" : "VPC"},
        "SecurityGroupIngress" : [ 
          {
          "IpProtocol" : "tcp",
          "SourceSecurityGroupId" : { "Ref" : "ALBInstanceSecurityGroup"},
          "FromPort" : "80",
          "ToPort" : "80"
        }
        ]
      },
      "DependsOn" : "VPC"
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },

   "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn" : "VPC",
      "Properties": {
         "InternetGatewayId": {"Ref" : "InternetGateway"},
         "VpcId": {"Ref" : "VPC"}
      }
    },

   "RouteTable" : {
         "Type" : "AWS::EC2::RouteTable",
         "DependsOn" : "VPC",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
         }
    },

    "Route1" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "InternetGateway",
         "Properties" : {
            "RouteTableId" : { "Ref" : "RouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "InternetGateway" }
         }
      },

      "SubnetRouteTableAssociation1" : {
         "Type" : "AWS::EC2::SubnetRouteTableAssociation",
         "DependsOn" : "RouteTable",
         "Properties" : {
            "SubnetId" : { "Ref" : "PublicSubnet1" },
            "RouteTableId" : { "Ref" : "RouteTable" }
         }
      },

      "SubnetRouteTableAssociation2" : {
         "Type" : "AWS::EC2::SubnetRouteTableAssociation",
         "DependsOn" : "RouteTable",
         "Properties" : {
            "SubnetId" : { "Ref" : "PublicSubnet2" },
            "RouteTableId" : { "Ref" : "RouteTable" }
         }
      }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}]]}
    }
  } 
}