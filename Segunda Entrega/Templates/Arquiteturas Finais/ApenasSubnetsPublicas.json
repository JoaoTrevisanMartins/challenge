{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "KeyPair" :{
      "Type" : "String",
      "Default" : "KeyPair-SaoPaulo"
    },

    "HostedZoneName" : {
       "Type" : "String",
       "Default" : "papaitaki.ml"
    },

    "HostedZoneID" : {
      "Type" : "String",
      "Default" : "ZRYYTAQLTXOAH"
    },

    "ListenerCertificateARN" : {
      "Type" : "String",
      "Default" : "arn:aws:acm:sa-east-1:075204848977:certificate/5dd27333-2898-479e-b010-a7fa86914b14"
    }

  },

  	"Mappings" : {
	  "AMIMap" : {
	    "us-east-1" : { "HVM64" : "ami-06abe0f752035395a"},
	    "sa-east-1" : { "HVM64" : "ami-0efbfe6c0d5ea7a01"}
	  },

	  "AZMap" : {
	    "us-east-1" : {"AZ1" : "us-east-1a", "AZ2" : "us-east-1b"},
        "sa-east-1" : {"AZ1" : "sa-east-1a", "AZ2" : "sa-east-1c"}
	  }
	},


  "Resources" : {

    "RecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "AliasTarget" :{
          "DNSName" : { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]},
          "EvaluateTargetHealth": "false",
          "HostedZoneId" :  {"Fn::GetAtt": ["LoadBalancer", "CanonicalHostedZoneID"]}
        },
        "HostedZoneId" : { "Ref": "HostedZoneID" },
        "Name" : { "Fn::Join": [ "", ["www.", {"Ref": "HostedZoneName"} ] ] },
        "Type" : "A"
      },
      "DependsOn": [ "LoadBalancer", "TargetGroup" ]
    },

    "LoadBalancer" : {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "ApplicationLoadBalancer",
        "Scheme" : "internet-facing",
        "Subnets" : [ {"Ref": "PublicSubnet1"}, {"Ref" : "PublicSubnet2"}],
        "SecurityGroups": [{"Ref": "ALBSecurityGroup"}]
      },
      "DependsOn": [ "InternetGateway" ]
    },

    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 60,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 30,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 10,
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "TargetGroup" ] ] },
        "Port": 80,
        "Protocol": "HTTP",
        "HealthCheckPath": "/tech-u/index.html",
        "VpcId": { "Ref": "VPC" }
      },
      "DependsOn": [ "LoadBalancer" ]
    },

    "LoadBalancerHTTPListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "TargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },

    "LoadBalancerHTTPSListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "TargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": 443,
        "Protocol": "HTTPS",
        "Certificates" : [ {"CertificateArn" : { "Ref": "ListenerCertificateARN" }
        }]
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "LaunchConfigurationName" : "Auto Scaling Launch Configuration",
        "ImageId" : { "Fn::FindInMap" : [ "AMIMap", { "Ref" : "AWS::Region" }, "HVM64"]},
        "SecurityGroups" : [ { "Ref" : "AutoScalingEC2SecurityGroup" } ],
        "InstanceType" : "t3.micro",
        "BlockDeviceMappings" : [ {
          "DeviceName" : "/dev/sdk",
          "Ebs" : {"VolumeSize" : "8"}
        }, {
          "DeviceName" : "/dev/sdc",
          "VirtualName" : "ephemeral0"
        } ],
        "IamInstanceProfile" : {"Ref" : "InstanceProfile"}
      }
    },

    "AutoScalingGroup" : {
     "Type" : "AWS::AutoScaling::AutoScalingGroup",
     "Properties" : {
        "AutoScalingGroupName" : "AutoScalingGroupChallenge2",
        "VPCZoneIdentifier" : [ {"Ref": "PublicSubnet1"}, {"Ref" : "PublicSubnet2"} ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "4",
        "Cooldown" : "70",
        "DesiredCapacity" : "2",
        "HealthCheckGracePeriod" : 60,
        "HealthCheckType": "ELB",
        "TargetGroupARNs" : [ { "Ref" : "TargetGroup" } ]
    },
    "DependsOn" : "LoadBalancer"
  },

  "BlackFridayScheduledAction" : {
    "Type" : "AWS::AutoScaling::ScheduledAction",
    "Properties" : {
      "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
      "DesiredCapacity" : 4,
      "EndTime" : "2018-11-24T02:15:00Z",
      "MaxSize" : 10,
      "MinSize" : 5,
      "StartTime" : "2018-11-23T01:45:00Z"
    }
  },
  
  "ScaleUpPolicy" : {
   "Type" : "AWS::AutoScaling::ScalingPolicy",
     "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "Cooldown" : "120",
        "ScalingAdjustment" : "1"
    }
  },

  "NetworkOutHigh": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
      "EvaluationPeriods": "1",
      "Statistic": "Average",
      "Threshold": "7000000",
      "Unit" : "Bytes",
      "AlarmDescription": "Alarm if NaetworkOut is 15M or higher",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
      "Namespace": "AWS/EC2",
      "Dimensions": [ {
       "Name": "AutoScalingGroupName",
       "Value": { "Ref": "AutoScalingGroup" }
     } ],
      "ComparisonOperator": "GreaterThanThreshold",
      "MetricName": "NetworkOut"
  }
},

    "ScaleDownPolicy" : {
     "Type" : "AWS::AutoScaling::ScalingPolicy",
     "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
      "Cooldown" : "120",
      "ScalingAdjustment" : "-1"
    }
  },

  "NetworkOutLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
      "EvaluationPeriods": "1",
      "Statistic": "Average",
      "Threshold": "4000000",
      "Unit" : "Bytes",
      "AlarmDescription": "Alarm if NaetworkOut is 7M or lower",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
      "Namespace": "AWS/EC2",
      "Dimensions": [ {
       "Name": "AutoScalingGroupName",
       "Value": { "Ref": "AutoScalingGroup" }
     } ],
      "ComparisonOperator": "LessThanThreshold",
      "MetricName": "NetworkOut"
    }
  },


  "VPC" : {
     "Type" : "AWS::EC2::VPC",
     "Properties" : {
      "CidrBlock" : "10.0.0.0/16",
      "EnableDnsSupport" : "true",
      "EnableDnsHostnames" : "true",
      "InstanceTenancy" : "default"
    }
  },

  "PublicSubnet1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock" : "10.0.1.0/24",
        "AvailabilityZone" : { "Fn::FindInMap" : [ "AZMap", { "Ref" : "AWS::Region" }, "AZ1"]}
    },
    "DependsOn" : "VPC"
  },

  "PublicSubnet2" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock" : "10.0.2.0/24",
        "AvailabilityZone" : { "Fn::FindInMap" : [ "AZMap", { "Ref" : "AWS::Region" }, "AZ2"]}
    },
    "DependsOn" : "VPC"
  },

  "ALBSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupName" : "challengeALB",
      "GroupDescription" : "Enable HTTP and HTTPS for ALB",
      "VpcId": {"Ref" : "VPC"},
      "SecurityGroupIngress" : [ {
       "IpProtocol": "tcp",
       "FromPort": "80",
       "ToPort": "80",
       "CidrIp": "0.0.0.0/0"
     },
     {
       "IpProtocol": "tcp",
       "FromPort": "443",
       "ToPort": "443",
       "CidrIp": "0.0.0.0/0"
     }
    ]
    },
    "DependsOn" : "VPC"
  },

  "AutoScalingEC2SecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupName" : "challengeALBtoEC2",
      "GroupDescription" : "Enable ALB access to EC2",
      "VpcId": {"Ref" : "VPC"},
      "SecurityGroupIngress" : [ 
        {
          "IpProtocol" : "tcp",
          "SourceSecurityGroupId" : { "Ref" : "ALBSecurityGroup"},
          "FromPort" : "80",
          "ToPort" : "80"
        }
      ]
    },
    "DependsOn" : "VPC"
  },

  "InternetGateway": {
    "Type": "AWS::EC2::InternetGateway",
    "Properties": {}
  },

  "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn" : "VPC",
      "Properties": {
       "InternetGatewayId": {"Ref" : "InternetGateway"},
       "VpcId": {"Ref" : "VPC"}
     }
  },

  "RouteTable" : {
     "Type" : "AWS::EC2::RouteTable",
     "DependsOn" : "VPC",
     "Properties" : {
      "VpcId" : { "Ref" : "VPC" }
    }
  },

  "Route1" : {
     "Type" : "AWS::EC2::Route",
     "DependsOn" : ["InternetGateway", "InternetGatewayAttachment"],
     "Properties" : {
      "RouteTableId" : { "Ref" : "RouteTable" },
      "DestinationCidrBlock" : "0.0.0.0/0",
      "GatewayId" : { "Ref" : "InternetGateway" }
    }
  },

  "SubnetRouteTableAssociation1" : {
     "Type" : "AWS::EC2::SubnetRouteTableAssociation",
     "DependsOn" : "RouteTable",
     "Properties" : {
      "SubnetId" : { "Ref" : "PublicSubnet1" },
      "RouteTableId" : { "Ref" : "RouteTable" }
    }
  },

  "SubnetRouteTableAssociation2" : {
     "Type" : "AWS::EC2::SubnetRouteTableAssociation",
     "DependsOn" : "RouteTable",
       "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

  "Role": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
            },
            "Path": "/"
         }
      },

  "RolePolicies": {
     "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "ssm:DescribeAssociation",
                        "ssm:GetDeployablePatchSnapshotForInstance",
                        "ssm:GetDocument",
                        "ssm:GetManifest",
                        "ssm:GetParameters",
                        "ssm:ListAssociations",
                        "ssm:ListInstanceAssociations",
                        "ssm:PutInventory",
                        "ssm:PutComplianceItems",
                        "ssm:PutConfigurePackageResult",
                        "ssm:UpdateAssociationStatus",
                        "ssm:UpdateInstanceAssociationStatus",
                        "ssm:UpdateInstanceInformation"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ssmmessages:CreateControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:OpenDataChannel"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2messages:AcknowledgeMessage",
                        "ec2messages:DeleteMessage",
                        "ec2messages:FailMessage",
                        "ec2messages:GetEndpoint",
                        "ec2messages:GetMessages",
                        "ec2messages:SendReply"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudwatch:PutMetricData"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeInstanceStatus"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ds:CreateComputer",
                        "ds:DescribeDirectories"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "s3:GetBucketLocation",
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:GetEncryptionConfiguration",
                        "s3:AbortMultipartUpload",
                        "s3:ListMultipartUploadParts",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads"
                    ],
                    "Resource": "*"
                }
            ]
        },
        "Roles": [ {"Ref": "Role"} ]
      }
    },

      "InstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [ {"Ref": "Role"} ]
         }
      }

  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}]]}
    }
  } 
}