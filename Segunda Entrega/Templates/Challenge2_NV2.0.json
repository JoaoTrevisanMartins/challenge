{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "KeyPair" :{
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "KeyPair-NorthVirginia"
    }

  },


  "Resources" : {

    "LoadBalancer" : {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "ApplicationLoadBalancer",
        "Scheme" : "internet-facing",
        "Subnets" : [ {"Ref": "PublicSubnet1"}, {"Ref" : "PublicSubnet2"}],
        "SecurityGroups": [{"Ref": "ALBSecurityGroup"}]
      },
      "DependsOn": [ "InternetGateway" ]
    },

    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 60,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 30,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 10,
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "TargetGroup" ] ] },
        "Port": 80,
        "Protocol": "HTTP",
        "HealthCheckPath": "/tech-u/index.html",
        "VpcId": { "Ref": "VPC" }
      },
      "DependsOn": [ "LoadBalancer" ]
    },

    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "TargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "LaunchConfigurationName" : "Auto Scaling Launch Configuration",
        "ImageId" : "ami-0bf63a0b969bba5e9",
        "SecurityGroups" : [ { "Ref" : "AutoScalingEC2SecurityGroup" } ],
        "InstanceType" : "t2.micro",
        "BlockDeviceMappings" : [ {
          "DeviceName" : "/dev/sdk",
          "Ebs" : {"VolumeSize" : "8"}
        }, {
          "DeviceName" : "/dev/sdc",
          "VirtualName" : "ephemeral0"
        } ]
      }
    },

    "AutoScalingGroup" : {
     "Type" : "AWS::AutoScaling::AutoScalingGroup",
     "Properties" : {
        "AutoScalingGroupName" : "AutoScalingGroupChallenge2",
        "VPCZoneIdentifier" : [ {"Ref": "PrivateSubnet1"}, {"Ref" : "PrivateSubnet2"} ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "4",
        "DesiredCapacity" : "2",
        "HealthCheckGracePeriod" : 60,
        "HealthCheckType": "ELB",
        "TargetGroupARNs" : [ { "Ref" : "TargetGroup" } ]
    },
    "DependsOn" : "LoadBalancer"
  },

    "ScaleUpPolicy" : {
     "Type" : "AWS::AutoScaling::ScalingPolicy",
     "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "Cooldown" : "120",
        "ScalingAdjustment" : "1"
    }
  },

  "ResponseTimeAlarmHigh": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
      "EvaluationPeriods": "1",
      "Statistic": "Average",
      "Threshold": "0.05",
      "AlarmDescription": "Alarm if Target Response Time is 50 miliseconds or higher",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
      "Namespace": "AWS/ApplicationELB",
      "Dimensions": [ {
       "Name": "AutoScalingGroupName",
       "Value": { "Ref": "AutoScalingGroup" }
     } ],
      "ComparisonOperator": "GreaterThanThreshold",
      "MetricName": "TargetResponseTime"
  }
},

    "ScaleDownPolicy" : {
     "Type" : "AWS::AutoScaling::ScalingPolicy",
     "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
      "Cooldown" : "120",
      "ScalingAdjustment" : "-1"
    }
  },

  "ResponseTimeAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
      "EvaluationPeriods": "1",
      "Statistic": "Average",
      "Threshold": "0.02",
      "AlarmDescription": "Alarm if Target Response Time is 20 miliseconds or lower",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
      "Namespace": "AWS/ApplicationELB",
      "Dimensions": [ {
       "Name": "AutoScalingGroupName",
       "Value": { "Ref": "AutoScalingGroup" }
     } ],
      "ComparisonOperator": "LessThanThreshold",
      "MetricName": "TargetResponseTime"
    }
  },


  "VPC" : {
     "Type" : "AWS::EC2::VPC",
     "Properties" : {
      "CidrBlock" : "10.0.0.0/16",
      "EnableDnsSupport" : "true",
      "EnableDnsHostnames" : "true",
      "InstanceTenancy" : "default"
    }
  },

  "PublicSubnet1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock" : "10.0.1.0/24",
        "AvailabilityZone" : "us-east-1a"
    },
    "DependsOn" : "VPC"
  },

  "PublicSubnet2" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock" : "10.0.2.0/24",
        "AvailabilityZone" : "us-east-1b"
    },
    "DependsOn" : "VPC"
  },

    "PrivateSubnet1" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "MapPublicIpOnLaunch": "false",
         "CidrBlock" : "10.0.3.0/24",
         "AvailabilityZone" : "us-east-1a"
       },
       "DependsOn" : "VPC"
    },

    "PrivateSubnet2" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "MapPublicIpOnLaunch": "false",
          "CidrBlock" : "10.0.4.0/24",
          "AvailabilityZone" : "us-east-1b"
        },
        "DependsOn" : "VPC"
     },

  "ALBSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupName" : "challengeALB",
      "GroupDescription" : "Enable SSH access via port 22",
      "VpcId": {"Ref" : "VPC"},
      "SecurityGroupIngress" : [ {
       "IpProtocol": "tcp",
       "FromPort": "80",
       "ToPort": "80",
       "CidrIp": "0.0.0.0/0"
     } ]
    },
    "DependsOn" : "VPC"
  },

  "AutoScalingEC2SecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupName" : "challengeALBtoEC2",
      "GroupDescription" : "Enable ALB access to EC2",
      "VpcId": {"Ref" : "VPC"},
      "SecurityGroupIngress" : [ 
        {
          "IpProtocol" : "tcp",
          "SourceSecurityGroupId" : { "Ref" : "ALBSecurityGroup"},
          "FromPort" : "80",
          "ToPort" : "80"
        }
      ]
    },
    "DependsOn" : "VPC"
  },

  "InternetGateway": {
    "Type": "AWS::EC2::InternetGateway",
    "Properties": {}
  },

  "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn" : "VPC",
      "Properties": {
       "InternetGatewayId": {"Ref" : "InternetGateway"},
       "VpcId": {"Ref" : "VPC"}
     }
  },

  "RouteTable" : {
     "Type" : "AWS::EC2::RouteTable",
     "DependsOn" : "VPC",
     "Properties" : {
      "VpcId" : { "Ref" : "VPC" },
    }
  },

  "Route1" : {
     "Type" : "AWS::EC2::Route",
     "DependsOn" : "InternetGateway",
     "Properties" : {
      "RouteTableId" : { "Ref" : "RouteTable" },
      "DestinationCidrBlock" : "0.0.0.0/0",
      "GatewayId" : { "Ref" : "InternetGateway" }
    }
  },

  "SubnetRouteTableAssociation1" : {
     "Type" : "AWS::EC2::SubnetRouteTableAssociation",
     "DependsOn" : "RouteTable",
     "Properties" : {
      "SubnetId" : { "Ref" : "PublicSubnet1" },
      "RouteTableId" : { "Ref" : "RouteTable" }
    }
  },

  "SubnetRouteTableAssociation2" : {
     "Type" : "AWS::EC2::SubnetRouteTableAssociation",
     "DependsOn" : "RouteTable",
       "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

  "EIP" : {
    "Type" : "AWS::EC2::EIP",
    "Properties" : {
      "Domain" : "VPC"
    }
  },

  "NATGateway" : {
    "DependsOn" : "InternetGatewayAttachment",
    "Type" : "AWS::EC2::NatGateway",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
        "SubnetId" : { "Ref" : "PublicSubnet1"},
      }
    },

  "RouteTable2" : {
    "Type" : "AWS::EC2::RouteTable",
    "DependsOn" : "VPC",
    "Properties" : {
      "VpcId" : { "Ref" : "VPC" },
    }
  },

  "Route2" : {
    "Type" : "AWS::EC2::Route",
    "DependsOn" : "NATGateway",
    "Properties" : {
      "RouteTableId" : { "Ref" : "RouteTable2" },
      "DestinationCidrBlock" : "0.0.0.0/0",
      "NatGatewayId" : { "Ref" : "NATGateway" }
    }
  },

  "SubnetRouteTableAssociation3" : {
    "Type" : "AWS::EC2::SubnetRouteTableAssociation",
    "DependsOn" : "RouteTable2",
    "Properties" : {
      "SubnetId" : { "Ref" : "PrivateSubnet1" },
      "RouteTableId" : { "Ref" : "RouteTable2" }
    }
  },

  "SubnetRouteTableAssociation4" : {
    "Type" : "AWS::EC2::SubnetRouteTableAssociation",
    "DependsOn" : "RouteTable2",
    "Properties" : {
      "SubnetId" : { "Ref" : "PrivateSubnet2" },
      "RouteTableId" : { "Ref" : "RouteTable2" }
    }
  }

  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}]]}
    }
  } 
}